'''
The purpose of this code is to add EPSS and Known Exploited Vulnerability data
to a list of CVEs.  The user can choose how to input files - CSV or Terminal. 
'''
import csv
import requests
import json
import pandas as pd


# Asks the user for a list of CVEs either from the terminal
# or from a file path
def get_user_input():
    csv = {'.csv', 'csv'}
    terminal = {'terminal', 'term', 'cli'}
    user_input = input("How would you like to input your CVE Data? Options include .CSV (csv) file -or- terminal (terminal) input: ").lower()
    if user_input in csv:
        csv_path = get_csv_file_path()
        cve_list = get_cve_list_from_csv(csv_path)
    elif user_input in terminal:
        cve_string_from_terminal = input("Pleaes provide the CVE ID(s): ")
        cve_list = get_cve_list_from_terminal(cve_string_from_terminal)
    else:
        print("Please respond with 'csv' or 'terminal' ")
    return cve_list


# gets the file path from user input if this option is chosen
def get_csv_file_path():
    csv_path = input("Please provide the path to your CSV file: ")
    return csv_path


# creates a list from the csv file path
def get_cve_list_from_csv(csv_path):
    with open(csv_path, 'r') as f:
        cve_list = [line.rstrip('\n') for line in f]
    return cve_list


# creates a list from the user's input if this option is chosen
def get_cve_list_from_terminal(cve_string_from_terminal):
    cve_list_from_terminal = cve_string_from_terminal.split(",")
    cve_list_from_terminal = [cve.strip() for cve in cve_list_from_terminal]
    return cve_list_from_terminal


# calls the cisa kev catalog and returns the json response
def get_kev_vulns():
    kev_URL = "https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json"
    kev_response = requests.get(kev_URL)
    if kev_response.status_code == 200:
        kev_catalog_json = kev_response.json()
        return kev_catalog_json
    else:
        raise Exception("Failed to fetch KEV catalog")


# returns match vulnerability information from the KEV catalog
# for the cve's provided by the user
def find_kev_info_by_cve(cve_id, kev_catalog_json):
    for vulnerability in kev_catalog_json["vulnerabilities"]:
        if vulnerability["cveID"] == cve_id:
            return vulnerability
    return None


# for one cve_id from the user, checks to see if it is in the KEV catalog
# creates a list
# Adds a dictionary item for each CVE based on whether or not it was found
# in the KEV Catalog
def check_cves_in_kev(cve_list, kev_catalog_json):
    cve_kev_info = []
    for cve_id in cve_list:
        vulnerability_data = find_kev_info_by_cve(cve_id, kev_catalog_json)
        if vulnerability_data:
            cve_kev_info.append(
                {
                    "cve_id": cve_id,
                    "is_kev": "TRUE",
                    "knownRansomwareCampaignUse": vulnerability_data.get("knownRansomwareCampaignUse")
                }
            )
        else:
            cve_kev_info.append(
                {
                    "cve_id": cve_id,
                    "is_kev": "TRUE",
                    "knownRansomwareCampaignUse": "N/A"
                }
            )
    return cve_kev_info


# Calls the EPSS API with the CVEs provided by the user
# returns the json response
def get_epss_for_cves(cve_list):
    cve_string = ",".join(str(cve) for cve in cve_list)
    epss_URL = f"https://api.first.org/data/v1/epss?cve={cve_string}"
    epss_respone = requests.get(epss_URL)
    if epss_respone.status_code == 200:
        epss_response_json = epss_respone.json()
        epss_data = epss_response_json['data']
        return epss_data


# Adds the epss score to the list of dictionaries to build a 
# complete data set
def build_complete_cve_kev_epss_data(cve_kev_info, epss_data):
    epss_dict = {item['cve']: item['epss'] for item in epss_data}
    for cve_kev_item in cve_kev_info:
        cve_id = cve_kev_item['cve_id']
        if cve_id in epss_dict:
            cve_kev_item['epss_score'] = epss_dict[cve_id]
    return cve_kev_info


# Creates an excel file with all of the information
def export_to_excel(cve_kev_epss_df):
    with pd.ExcelWriter("cve_kev_epss_data.xlsx") as writer:
        cve_kev_epss_df.to_excel(writer, sheet_name="data", index=False)

def main():
    cve_list = get_user_input()
    kev_catalog_json = get_kev_vulns()
    epss_data = get_epss_for_cves(cve_list)
    cve_kev_info = check_cves_in_kev(cve_list, kev_catalog_json)
    cve_kev_epss_info = build_complete_cve_kev_epss_data(cve_kev_info, epss_data)
    cve_kev_epss_df = pd.DataFrame(cve_kev_epss_info)
    export_to_excel(cve_kev_epss_df)

if __name__ == "__main__":
    main()
