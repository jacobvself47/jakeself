Function Get-LocalGroupMembership{
 [Cmdletbinding()]
 PARAM (
        [alias('DnsHostName','__SERVER','Computer','IPAddress')]
  [Parameter(ValueFromPipelineByPropertyName=$true,ValueFromPipeline=$true)]
  [string[]]$ComputerName = $env:COMPUTERNAME,
    [string]$GroupName = $env:GROUPNAME
  )
    BEGIN{
    }#BEGIN BLOCK
    PROCESS{
        foreach ($Computer in $ComputerName){
            TRY{
                $Everything_is_OK = $true
                # Testing the connection
                Write-Verbose -Message "$Computer - Testing connection..."
                Test-Connection -ComputerName $Computer -Count 1 -ErrorAction Stop |Out-Null
                # Get the members for the group and computer specified
                Write-Verbose -Message "$Computer - Querying..."
             $Group = [ADSI]"WinNT://$Computer/$GroupName,group"
             $Members = @($group.psbase.Invoke("Members"))
            }#TRY;e=(
            CATCH{
                $Everything_is_OK = $false
                Write-Warning -Message "Something went wrong on $Computer"
                Write-Verbose -Message "Error on $Computer"
                }#Catch
                    IF($Everything_is_OK){
             # Format the Output
                Write-Verbose -Message "$Computer - Formatting Data"
              $members | ForEach-Object {
              $name = $_.GetType().InvokeMember("Name", 'GetProperty', $null, $_, $null)
              $class = $_.GetType().InvokeMember("Class", 'GetProperty', $null, $_, $null)
              $path = $_.GetType().InvokeMember("ADsPath", 'GetProperty', $null, $_, $null)
                # Find out if this is a local or domain object
              if ($path -like "*/$Computer/*"){
               $Type = "Local"
               }
              else {$Type = "Domain"
              }
              $Details = "" | Select-Object ComputerName,Account,Class,Group,Path,Type
              $Details.ComputerName = $Computer
              $Details.Account = $name
              $Details.Class = $class
              $Details.Group = $GroupName
              $Details.Path = $path
              $Details.Type = $type
              # Find nested group membership
              foreach ($path in $Details){                 
               try{     
                function Get-ADNestedGroupMembers {
                 [cmdletbinding()]
                 param ( [String] $Group )            
                 $Members = Get-ADGroupMember -Identity $Group -Recursive |
				  Select-Object @{n='GroupName';e={$Group}}, Name, SAMAccountName, ObjectClass,
								@{Name= 'Computer'; Expression = { $Computer }},
                                @{n='Enabled'; e={if ($_.ObjectClass -eq 'user') {
								Get-ADUser $_ | Select-Object -Expand Enabled
                                }
                                else {
								  'NA/Group'
								}}}
                 $Members
                 }
                 $NestedGroupMembers = Get-ADNestedGroupMembers $name
                 $NestedGroupMembers
                } #try the function for each Group
               catch{
                Write-Output "$Computer, $name, No group members. $UserStatus"
               }
              } #foreach Prints out nested group membership
             } #foreach object
            }#IF(Everything_is_OK)
        }#Foreach
    }#PROCESS BLOCK
    END{Write-Verbose -Message "Script Done"}#END BLOCK
}#Function Get-LocalGroupMembership
